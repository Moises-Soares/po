@startuml spotyUM
title MVC Architecture - SpotifUM 

package "App" {
    ' Main application entry point
    class SpotifumApp {
        + main(args: String[]): void ' Starts the application
    }
}


package "Controller" {
    ' Manages users, songs, albums and handles the application logic
    class SpotifumController {
        - users: List<User> 
        - albums: List<Album> 
        - publicPlaylists: List<Playlist>
        - subscriptionPlans: List<SubscriptionPlan>

        + addUser(u: User): void 
        + listUsers(): List<User>
        + searchUsers(name: String): List<User>
        + getUserByEmail(email: String): User


        + addAlbum(a: Album): void 
        + listAlbums(): List<Album>
        + searchAlbums(name: String): List<Album>
        + getAlbumByName(name: String): Album

        + addSubscriptionPlan(sp: SubscriptionPlan): void
        + listSubscriptionPlans(): List<SubscriptionPlan>
        + getSubscriptionPlanByName(name: String): SubscriptionPlan

        + saveState(filename: String): void 
        + loadState(filename: String): void 

    }
}

package "Model" {
    ' Represents a song entity
    class Song {
        - name: String
        - artist: String
        - publisher: String
        - lyrics: String
        - music: List<String>
        - genre: String
        - duration: int
        - playCount: int

        + play(): void
        + incrementPlayCount(): void
        + getType():
    }

    ' Represents an explicit content song
    class ExplicitSong extends Song {
        + getType(): String
    }

    ' Represents a song with associated video
    class MultimediaSong extends Song {
        - videoUrl: String
        + getType(): String
    }

    ' Represents a music album
    class Album {
        - name: String
        - songs: List<Song>

        + addSong(s: Song): void ' Add a song to the album
        + removeSong(s: Song): void ' Remove a song from the album
        + listSongs(): List<Song> ' List songs from the album
    }

    ' Base class for different types of playlists
    abstract class Playlist {
        - name: String
        - songs: List<Song>
        - currentIndex: int

        + addSong(s: Song): void ' Add a song to the playlist
        + removeSong(s: Song): void ' Remove a song from the playlist
        + play(): void ' Play the current song
        + next(): void ' Move to the next song
        + previous(): void ' Move to the previous song
    }

    ' A playlist with random playback
    class RandomPlaylist extends Playlist {
        + next(): void
        + previous(): void
    }

    ' A playlist with ordered or shuffled playback
    class OrderedPlaylist extends Playlist {
        - shuffleMode: boolean
        + next(): void
        + previous(): void
    }

    ' A special playlist generated based on user preferences
    class FavoritePlaylist extends Playlist {
        + static generateFavorites(u: User): FavoritePlaylist
    }

    ' Represents a user of the system
    class User {
        - name: String
        - email: String
        - address: String
        - points: double
        - subscription: SubscriptionPlan
        - library: List<Album>
        - playlists: List<Playlist>
        - playHistory: Map<Song, Integer>

        + play(Song song): void ' User plays a song
        + createPlaylist(name: String): OrderedPlaylist ' Create a new playlist
        + getPoints(): double ' Get accumulated points
        + addAlbum(album: Album): void ' Add an album to the personal library
        + addPlaylist(playlist: Playlist): void ' Add a playlist to the user
    }

    ' Abstract class for user subscription plans
    abstract class SubscriptionPlan {
        - name: String

        + calculatePoints(currentPoints: double): double ' How points are awarded
        + canCreatePlaylist(): boolean ' Check if can create playlists
        + canSaveAlbums(): boolean ' Check if can save albums
        + canGenerateFavoritePlaylists(): boolean ' Check if can generate favorites
    }

    ' Free plan: limited capabilities
    class FreePlan extends SubscriptionPlan {
    }

    ' Premium Base plan: basic premium features
    class PremiumBasePlan extends SubscriptionPlan {
    }

    ' Premium Top plan: full premium features
    class PremiumTopPlan extends SubscriptionPlan {
    }
}


package "View" {
    ' Handles interaction with the user (text-based menu)
    class SpotifumView {
        - controller: SpotifumController
        - scanner: Scanner

        + mainMenu(): void ' Display the main menu
        + createUser(): void ' Create a new user
        + createSong(): void ' Create a new song
        + createAlbum(): void ' Create a new album
        + createPlaylist(): void ' Create a new playlist
        + playSong(): void ' Play a song
        + playPlaylist(): void ' Play a playlist
        + listUsers(): void ' List all users
        + listSongs(): void ' List all songs
        + listAlbums(): void ' List all albums
        + mostPlayedSong(): void ' Show the most played song
        + saveState(): void ' Save system state
        + loadState(): void ' Load system state
    }
}


SpotifumApp --> SpotifumView
SpotifumView --> SpotifumController
SpotifumController --> User
SpotifumController --> Song
SpotifumController --> Album

User --> SubscriptionPlan
User --> Playlist
User --> Album
Playlist --> Song
Album --> Song

PremiumBasePlan --|> SubscriptionPlan
PremiumTopPlan --|> SubscriptionPlan
FreePlan --|> SubscriptionPlan
ExplicitSong --|> Song
MultimediaSong --|> Song
RandomPlaylist --|> Playlist
OrderedPlaylist --|> Playlist
FavoritePlaylist --|> Playlist

@enduml
